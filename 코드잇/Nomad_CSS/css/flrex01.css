.father {
  /* display:flex 만 지정해도, inline-block과 같은 속성을 얻음 
    flex 속성은 붙어있는 부모가 자식(children)의 위치를 움직일 수 있음 
    1) flex-direction: row(행, 가로 정렬, 기본 속성), 
      * horizontal axis(수평축), main axis -> justify-content
      * cross axis(수직축, 세로) -> align-items
      * row-reverse : 가로로 나열 + 순서를 거꾸로 뒤집음
      * column-reverse : 세로로 나열 + 순서를 거꾸로 뒤집음
  */
  display: flex;
  flex-direction: row-reverse;
  /* justify-content : 수평축에 있는 flex children의 위치를 변경 -> center 지정 시 가운데 정렬 
     space-between : box 사이에 공간을 주어 배치, space-around : box 사이와의 간격을 모두 같에 배치

     flex-direction: row; 일때, main axis는 가로. justify-content로 가로 제어, align-items로 세로 제어

     align-content : 줄이 나누어질때, flex-start로 지정하면 줄 사이의 간격 너비가 사라짐
     (= align-content는 line을 변경함)
  */
  justify-content: space-around;
  align-content: space-around ;

  /* align-items 사용 시 부모(.box의 부모 : .wrapper)의 높이 기준으로 세로 정렬하기 때문에, 높이 지정이 필요함
     align-items : strech; 사용 시, 자식 클래스 높이가 전체로 뻗어나가 채워짐(기본 height 지정이 없다면, 부모 높이까지 채워짐)
     * flex-start : 기본값, flex-end : 맨 밑으로 정렬, center : 부모 높이 기준 세로로 가운데 정렬
  */
  align-items: strech; 
  height: 100vh;

  /* flex-wrap의 기본값 : no-wrap(사용자가 지정한 width 값을 무시하고 요소를 한 줄에 맞춤)
     * wrap : 사용자가 지정한 width 값에 맞추어, 전체 너비를 초과하면 다음 줄로 이동(1234 한줄, 567번 박스 두줄 과 같이)
     * wrap-reverse : 사용자가 지정한 값에 맞춤 + 순서를 거꾸로 뒤집음
  */
  flex-wrap: wrap; /* 200px에 맞추어 정렬됨 */ 
}

.child {
  background: blue;
  /* width를 지정하더라도 flexbox는 요소가 모두 한 줄에 오도록 배치함(=박스 6개가 한줄에 있을 경우 지정한 200px 이하로 너비가 줄어들 수 있음) */ 
  /* width: 200px;
  height: 200px; */
  /* div 기본 속성 : block */
  /* block 속성 유지(box속성, 너비&높이 적용 가능) <-> inline(text, box가 아님) */
  display: inline-block;
  color: white;

}

.child:nth-child(2) {
  background: black;
  /* 1) align-self : 한 개의 자식에 대해서 적용할 수 있음(align-items와 비슷한 역할)
   = cross axis 방향에 존재하는 item의 위치를 변경
   (현재 flex-direction이 row일 경우, align-self: center시 높이의 중간점으로 이동, column인 경우 cros-axis는 가로축 방향이 됨)
   height를 기준으로 작성할 때, 부모(.father)에 높이가 지정되어 있어야 그를 기준점으로 작동함

    2) order : 자식에게 지정할 수 있는 속성(html child 클래스 3개의 순서를 html 코드 변경 없이 조정 가능)
    order는 기본으로 0부터 시작하기 떄문에, 1을 지정하면 2번째 child인 2번 박스가 제일 마지막으로 이동한다.
    ex) child(1)이 order 2, child(2)가 order 3, child(3)에는 지정값이 없을때(=기본값 0 배정) 0 < 2 < 3 order순인 3번, 1번, 2번 박스로 배치

    3) flex-shrink, flex-grow: 자식에게만 적용 가능한 속성(반응형 디자인에 많이 사용)
    * flex-shrink: element의 행동을 정의(1이 기본값, 2로 설정할 경우 다른 상자에 비해 2배 많이 줄어듬!)
    * flex-grow: shrink의 반대(0이 기본값, 1로 설정하면 다른 상자에 비해 2배 더 커짐. 박스 주변의 공간이 남아있다면 다 차지함)
  */
  flex-shrink: 1;
  /* align-self: center;
  order: 1; */
}

.child:nth-child(3) {
  /* align-self: flex-end; */
}

/* .box:nth-child(n) 과 같이 스타일 지정 가능하나, 다른 화면사이즈에서 디자인이 깨짐 -> flex 사용 */